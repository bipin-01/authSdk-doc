---
title: API Reference

language_tabs: # must be one of https://git.io/vQNgJ
  - javascript

toc_footers:
  # - <a href='#'>Sign Up for a Developer Key</a>
  # - <a href='https://github.com/slatedocs/slate'>Documentation Powered by Slate</a>


search: true

code_clipboard: true

includes:
  - errors

meta:
  - name: description
    content: Documentation for the Kittn API
---

# Introduction

Welcome to the Auth SDk API! You can use our API to access authorization as service endpoints,  through which you can create roles for various purposes.

Typescript SDK for Vyaguta Authorization as a Service.

# Configuration

First of all, Create Personal Access Token (PAT) from github with at least read:packages access.

then use the PAT and perform the following for your respective OS.

The code snippet is shown on the left side:

``` Javascript  
// For Linux you can use this command
echo "//npm.pkg.github.com/:_authToken=<Your PAT>" >> ~/.npmrc;
// For Windows, follow following steps:
Goto: `C:\Users\<YOUR_USER_NAME>`
Create a `.npmrc` file
Copy the content to .npmrc file: "//npm.pkg.github.com/:_authToken=<Your PAT>"

```

# Installation

To install the package run the snippet shown on the left:

``` Javascript
npm install @lf-network/auth-sdk-js
```

# USAGE

``` javascript

import { AuthClient } from "@lf-network/auth-sdk-js";

const client = new AuthClient({
  baseUrl: "http://localhost:8080/v1",
});

const { role, policy, permission } = client;

``` 

<%= partial "./api/Get/get.html.md.erb" %>

<%= partial "./api/Get/otherGetMethods.html.md.erb" %>

<%= partial "./api/Create/createMethods.html.md.erb" %>

<%= partial "./api/Create/createRPP.html.md.erb" %>

<%= partial "./api/Update/update.html.md.erb" %>

# CREATE OR UPDATE ATTACHED ROLE / POLICY / PERMISSION

``` javascript

import { policyRole, policyPermission } = client;
```

## Create Methods

``` javascript

await policyRole.create({
  policyid: ["1"], 
  roleid: ["2", "3"]
})

await policyPermission.create({
  policyid: ["1"], 
  permissionid: ["2", "3"]
})

```

## Update Methods

``` javascript

await policyRole.update(id, {
  policyid: ["1"], 
  roleid: ["2", "3"]
})

await policyPermission.update(id, {
  policyid: ["1"], 
  permissionid: ["2", "3"]
})
```
where id is the id of the corresponding table.

Note: There are GET and DELETE methods to delete for fetching and deleting attached data as well.

# Delete Methods

To delete, just pass the id of what to you want to delete of.

``` javascript

await role.delete("1");
await permission.delete("1");
await policy.delete("1");
```
